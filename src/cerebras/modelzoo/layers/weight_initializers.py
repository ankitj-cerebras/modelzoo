# Copyright 2022 Cerebras Systems.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import math
import warnings

import torch
from torch.nn.init import _calculate_fan_in_and_fan_out


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            f"{mean} is more than 2 std from [{a}, {b}]. "
            + f"The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor (torch.Tensor): an n-dimensional `torch.Tensor`
        mean (float): the mean of the normal distribution. Defaults to `0.0`
        std (float): the standard deviation of the normal distribution.
            Defaults to `1.0`
        a (float): the minimum cutoff value. Defaults to `-2.0`
        b (float): the maximum cutoff value. Defaults to `2.0`

    Examples:
        >>> w = torch.empty(3, 3)
        >>> trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def variance_scaling_(
    tensor, scale=1.0, mode="fan_in", distribution="truncated_normal"
):
    r"""Adapted from TensorFlow's initializations
    https://www.tensorflow.org/api_docs/python/tf/keras/initializers/VarianceScaling

    Fills the input Tensor with values given scale, mode and distribution.

    Args:
        tensor (torch.Tensor): an n-dimensional `torch.Tensor`
        scale (float): scaling factor (positive float)
        mode (str): mode of weight initialization. Defaults to `fan_in`
        distribution (str): distributino to initialize tensors with. Defaults to
            `truncated_normal`

    Examples:
        >>> w = torch.empty(3, 3)
        >>> variance_scaling_(w)

    """
    fan_in, fan_out = _calculate_fan_in_and_fan_out(tensor)
    if mode == 'fan_in':
        denom = max(1.0, fan_in)
    elif mode == 'fan_out':
        denom = max(1.0, fan_out)
    elif mode == 'fan_avg':
        denom = (fan_in + fan_out) / 2
        denom = max(1.0, denom)

    variance = scale / denom

    if distribution == "truncated_normal":
        # constant from scipy.stats.truncnorm.std(a=-2, b=2, loc=0., scale=1.)
        trunc_normal_(tensor, std=math.sqrt(variance) / 0.87962566103423978)
    elif distribution == "normal":
        tensor.normal_(std=math.sqrt(variance))
    elif distribution == "uniform":
        bound = math.sqrt(3 * variance)
        tensor.uniform_(-bound, bound)
    else:
        raise ValueError(f"invalid distribution {distribution}")


def lecun_normal_(tensor):
    r"""Adapted from TensorFlow's initializations
    https://www.tensorflow.org/api_docs/python/tf/keras/initializers/LecunNormal

    Args:
        tensor (torch.Tensor): an n-dimensional `torch.Tensor`

    Examples:
        >>> w = torch.empty(3, 3)
        >>> lecun_normal_(w)
    """
    variance_scaling_(tensor, mode="fan_in", distribution="truncated_normal")


def lecun_uniform_(tensor):
    r"""Adapted from TensorFlow's initializations
    https://www.tensorflow.org/api_docs/python/tf/keras/initializers/LecunUniform

    Args:
        tensor (torch.Tensor): an n-dimensional `torch.Tensor`

    Examples:
        >>> w = torch.empty(3, 3)
        >>> lecun_uniform_(w)
    """
    variance_scaling_(tensor, mode="fan_in", distribution="uniform")
