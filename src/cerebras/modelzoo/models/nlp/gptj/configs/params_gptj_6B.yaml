# GPT-J 6B model
# reference: https://github.com/kingoflolz/mesh-transformer-jax/blob/master/configs/6B_roto_256.json

train_input:
    data_processor: "GptHDF5MapDataProcessor"
    data_dir:
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/0/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/1/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/2/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/3/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/4/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/5/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/6/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/7/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/8/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/9/"
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 120
    shuffle: False
    shuffle_seed: 1337
    num_workers: 8
    prefetch_factor: 10
    persistent_workers: True # Important to avoid seeding at each epoch

eval_input:
    data_processor: "GptHDF5MapDataProcessor"
    data_dir: "./language/datasets/pile_original/hdf5_dataset/val_msl2048/"
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 120
    shuffle: False
    num_workers: 8
    prefetch_factor: 10
    persistent_workers: True # Important to avoid seeding at each epoch

model:
    # Embedding
    vocab_size: 50257
    position_embedding_type: "rotary"
    embedding_dropout_rate: 0.0
    share_embedding_weights: False

    # Decoder Block
    hidden_size: 4096
    num_heads: 16
    num_hidden_layers: 28
    max_position_embeddings: 2048
    attention_type: "scaled_dot_product"

    use_projection_bias_in_attention: False
    use_ffn_bias_in_attention: False
    use_ffn_bias: True

    filter_size: 16384 # 4 * hidden_size
    nonlinearity: "gelu"
    attention_dropout_rate: 0.0
    residual_dropout_rate: 0.0

    rotary_dim: 64 # hidden_size / num_heads * 25%
    layer_norm_epsilon: 1.0e-5
    use_bias_in_output: True
    initializer_range: 0.02

    loss_scaling: "num_tokens"
    loss_weight: 1.0

    # Initializer references: https://github.com/kingoflolz/mesh-transformer-jax/blob/master/mesh_transformer/layers.py
    # We use truncated_normal instead of normal ("ref: https://github.com/kingoflolz/mesh-transformer-jax"),
    # with the same std and mean for better performance
    embedding_initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.00446068668 # 1 / sqrt(vocab_size)
        a: -0.00892137336
        b: 0.00892137336

    initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.015625 # 1 / sqrt(hidden_size)
        a: -0.03125
        b: 0.03125

    output_layer_initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.00111607142 # 2 / num_hidden_layers / sqrt(hidden_size)
        a: -0.00223214284
        b: 0.00223214284

    fp16_type: "cbfloat16"
    mixed_precision: True

optimizer:
    optimizer_type: "adamw"
    eps: 1.0e-6
    weight_decay: 0.1
    max_gradient_norm: 1.0
    correct_bias: True
    # we want to keep the same number of tokens consistent with Eleuther gptj-6B
    # Eleuther batch_size https://github.com/kingoflolz/mesh-transformer-jax/blob/master/train.py#L89-L94
    # Eleuther 6B config https://github.com/kingoflolz/mesh-transformer-jax/blob/master/configs/6B_roto_256.json
    # Eleuther gpt-j: steps * batch_size (512) * seq_len (2048)
    learning_rate:
        - total_iters: 12800 # 3000 * 512 / 120
          scheduler: "Linear"
          initial_learning_rate: 0.0
          end_learning_rate: 5.809e-5 # sqrt(120 / 512) * 1.2e-4
        - scheduler: "CosineDecay"
          initial_learning_rate: 5.809e-5
          total_iters: 1280000 # 300000 * 512 / 120
          end_learning_rate: 5.809e-6 # sqrt(120 / 512) * 1.2e-5
        - scheduler: "Constant"
          learning_rate: 5.809e-6
    loss_scaling_factor: "dynamic"

runconfig:
    max_steps: 1493333 # 350000 * 512 / 120
    log_steps: 100
    checkpoint_steps: 10000
    seed: 1
