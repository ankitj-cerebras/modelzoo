# GPT-NEOX 1.3B model
# Based on https://github.com/EleutherAI/gpt-neox/blob/main/configs/XL.yml
train_input:
    data_processor: "GptHDF5MapDataProcessor"
    data_dir:
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/0/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/1/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/2/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/3/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/4/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/5/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/6/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/7/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/8/"
        - "./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/9/"
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 252
    shuffle: False
    shuffle_seed: 1337
    num_workers: 8
    prefetch_factor: 10
    persistent_workers: True # Important to avoid seeding at each epoch

eval_input:
    data_processor: "GptHDF5MapDataProcessor"
    data_dir: "./shuffled/language/datasets/pile_original/hdf5_dataset/val_neox_msl2048/"
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 252
    shuffle: False
    num_workers: 8
    prefetch_factor: 10
    persistent_workers: True # Important to avoid seeding at each epoch

model:
    # Embedding
    vocab_size: 50277
    position_embedding_type: "rotary"
    embedding_dropout_rate: 0.0
    share_embedding_weights: False

    # Decoder Block
    hidden_size: 2048
    num_heads: 16
    num_hidden_layers: 24
    max_position_embeddings: 2048
    attention_type: "scaled_dot_product"

    use_untied_layer_norm: True
    use_projection_bias_in_attention: True
    use_ffn_bias_in_attention: True
    use_ffn_bias: True

    filter_size: 8192
    nonlinearity: "gelu"
    attention_dropout_rate: 0.0
    residual_dropout_rate: 0.0

    rotary_dim: 128 # hidden_size / num_heads * rotary_pct(1.0), confirmed this with authors
    layer_norm_epsilon: 1.0e-5
    use_bias_in_output: False
    initializer_range: 0.02

    loss_scaling: "num_tokens"
    loss_weight: 1.0

    # We use truncated_normal instead of normal (ref: https://github.com/EleutherAI/gpt-neox) with the same std and mean for better performance.
    # We chose to align with Neox 20B for std
    embedding_initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.013975424859373685 # sqrt(2 / (5 * hidden_size))

    initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.013975424859373685 # sqrt(2 / (5 * hidden_size))

    output_layer_initializer:
        name: "truncated_normal"
        mean: 0.0
        std: 0.0018414239093399673 # 2 / num_hidden_layers / sqrt(hidden_size)

    fp16_type: "cbfloat16"
    mixed_precision: True

optimizer:
    optimizer_type: "adamw"
    betas: [0.9, 0.999]
    eps: 1.0e-8
    weight_decay: 0.0
    max_gradient_norm: 1.0
    correct_bias: True
    learning_rate:
    - total_iters: 6501 # 1% of max_steps
      scheduler: "Linear"
      initial_learning_rate: 0.0
      end_learning_rate: 7.01e-5   # sqrt(252 / 2048) * 2e-4
    - scheduler: "CosineDecay"
      initial_learning_rate: 7.01e-5
      total_iters: 643657 # 5416198 - 54161
      end_learning_rate: 7.01e-6 # (1 - 0.9) * 7.01e-5
    loss_scaling_factor: "dynamic"

runconfig:
    max_steps: 650158 # 320000 * 512 / 252
    log_steps: 100
    checkpoint_steps: 5000
    seed: 1

