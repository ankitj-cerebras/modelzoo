# A 256M parameter muP Cerebras-GPT model configuration designed for a single CS-2

train_input:
    data_processor: "GptHDF5DataProcessor"
    data_dir:
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/0/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/1/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/2/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/3/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/4/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/5/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/6/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/7/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/8/"
        - "./language/datasets/pile_original/hdf5_dataset/train_shuffled_msl2048/9/"
    shuffle: True
    shuffle_seed: 0
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 264 # 264 global = (264 micro)*(1 csx)*(1 grad accum step)
    num_workers: 1
    prefetch_factor: 10
    persistent_workers: True # Important to avoid seeding at each epoch

eval_input:
    data_processor: "GptHDF5DataProcessor"
    data_dir: "./language/datasets/pile_original/hdf5_dataset/val_msl2048/"
    # The effective batch size, which is evenly divided across "num_csx" systems used for the run
    batch_size: 264
    shuffle: False
    num_workers: 1


### Model
model:
    # Embedding
    hidden_size: 1088
    use_position_embedding: True
    position_embedding_type: "learned"
    share_embedding_weights: True
    max_position_embeddings: 2048
    vocab_size: 50257

    # Decoder
    num_hidden_layers: 14
    dropout_rate: 0.0
    layer_norm_epsilon: 1.0e-5 # change to 1.0e-12 for single precision training


    # Decoder - Attention
    num_heads: 17
    attention_type: "scaled_dot_product"
    attention_dropout_rate: 0.0
    use_projection_bias_in_attention: True
    use_ffn_bias_in_attention: True

    # Decoder - ffn
    filter_size: 4352
    nonlinearity: "gelu"
    use_ffn_bias: True

    # Initializers
    embedding_initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.08
        a: -0.16
        a: -0.16
    initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.03880570000581328
        a: -0.07761140001162656
        b: 0.07761140001162656
    output_layer_initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.0073335879762256905
        a: -0.014667175952451381
        b: 0.014667175952451381

    # Task-specific
    loss_scaling: "batch_size" # needed for gradient accumulation
    loss_weight: 0.00048828125 # = 1/max_sequence_length
    use_bias_in_output: False

    # muP
    scale_qk_dot_by_d: True
    output_logits_scale: 0.23529411764705882
    embeddings_scale: 10

    # Cerebras parameters
    mixed_precision: True
    use_bfloat16: True

### Optimization
optimizer:
    optimizer_type: "AdamW"
    betas: [0.9, 0.95]
    eps: 1.0e-8
    max_gradient_norm: 1.0
    learning_rate:
      - scheduler: "Linear"
        initial_learning_rate: 0.0
        end_learning_rate: 0.006
        total_iters: 693
      - scheduler: "Linear"
        initial_learning_rate: 0.006
        end_learning_rate: 0.0006
        total_iters: 8775
    weight_decay: 0.1
    log_summaries: True
    correct_bias: True
    adjust_learning_rate:
        decoder_kernel: 0.23529411764705882

### Cerebras parameters
runconfig:
    max_steps: 9468
    eval_steps: 702
    checkpoint_steps: 946
    enable_distributed: False
    log_steps: 1
    save_initial_checkpoint: False
    use_cs_grad_accum: True
    use_appliance_data: True
    precision_opt_level: 0 # also validated with precision_opt_level = 1
